# Analyze folders and look for good/best results

import glob

data_res = {}
data_train = []
data_test = []

for res_file in glob.iglob('**/**.results', recursive=True):
    with open(res_file, 'r') as rf:
        temp_epochs = None
        filename = res_file.split("/")[-1]
        data_res[res_file] = {'filename': filename}
        for line in rf:
            if "epochs =" in line:
                data_res[res_file]['epochs'] = int(line.strip().replace(" ", "").split("=")[1])
            elif "model =" in line:
                if "output_model =" in line:
                    data_res[res_file]['output'] = line.strip().replace(" ", "").split("=")[1]
                else:
                    data_res[res_file]['model'] = line.strip().replace(" ", "").split("=")[1]
            elif "size_img =" in line or "size_vec =" in line:
                data_res[res_file]['size_img-vec'] = line.strip().replace(" ", "").split("=")[1]
            elif "batch_size =" in line:
                data_res[res_file]['batch_size'] = line.strip().replace(" ", "").split("=")[1]
            elif "mode =" in line:
                data_res[res_file]['mode'] = line.strip().replace(" ", "").split("=")[1]
            
            elif "train_acc:" in line:
                data_res[res_file]['train_acc'] = float(line.strip().replace(" ", "").split(":")[1].split(",")[data_res[res_file]['epochs']-1][:-1])
            elif "train_prec:" in line:
                data_res[res_file]['train_prec'] = float(line.strip().replace(" ", "").split(":")[1].split(",")[data_res[res_file]['epochs']-1][:-1])
            elif "train_rec:" in line:
                data_res[res_file]['train_rec'] = float(line.strip().replace(" ", "").split(":")[1].split(",")[data_res[res_file]['epochs']-1][:-1])
            elif "val_acc:" in line:
                data_res[res_file]['val_acc'] = float(line.strip().replace(" ", "").split(":")[1].split(",")[data_res[res_file]['epochs']-1][:-1])
            elif "val_prec:" in line:
                data_res[res_file]['val_prec'] = float(line.strip().replace(" ", "").split(":")[1].split(",")[data_res[res_file]['epochs']-1][:-1])
            elif "val_rec:" in line:
                data_res[res_file]['val_rec'] = float(line.strip().replace(" ", "").split(":")[1].split(",")[data_res[res_file]['epochs']-1][:-1])

            elif "	test accuracy:" in line:
                data_res[res_file]['test_acc'] = float(line.strip().replace(" ", "").split(":")[1])
            elif "	Prec:" in line:
                data_res[res_file]['test_prec'] = float(line.strip().replace(" ", "").split(":")[1])
            elif "	Recall:" in line:
                data_res[res_file]['test_rec'] = float(line.strip().replace(" ", "").split(":")[1])
            elif "	F-Measure:" in line:
                data_res[res_file]['test_fm'] = float(line.strip().replace(" ", "").split(":")[1])
            elif "	AUC:" in line:
                data_res[res_file]['test_auc'] = float(line.strip().replace(" ", "").split(":")[1])

        if 'mode' in data_res[res_file]:
            if data_res[res_file]['mode'] == "train-val":
                data_train.append([data_res[res_file]['val_acc'], res_file, data_res[res_file]['model'], data_res[res_file]['output'], data_res[res_file]['size_img-vec'], data_res[res_file]['batch_size']])
            elif data_res[res_file]['mode'] == "train-test" or data_res[res_file]['mode'] == "test":
                data_test.append([data_res[res_file]['test_acc'], res_file, data_res[res_file]['model'], data_res[res_file]['output'], data_res[res_file]['size_img-vec'], data_res[res_file]['batch_size']])


if len(data_train) > 0:
    print("----- RESULTS TRAINING -----")
    data_train.sort(key=lambda tup: tup[0], reverse=True)
    for el in data_train:
        print(f"{el[0]} -> {el[1:]}")

if len(data_test) > 0:
    print("----- RESULTS TEST -----")
    data_test.sort(key=lambda tup: tup[0], reverse=True)
    for el in data_test:
        print(f"{el[0]} -> {el[1:]}")
        
